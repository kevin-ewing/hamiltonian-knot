'''
Procedural generation of a citycape

By Kevin Ewing
Spring 2022
Middlebury Animation Studio Independent project
'''


from colorsys import hsv_to_rgb
from dataclasses import dataclass
from random import randint, uniform
from os import getcwd
from site import addpackage
from sys import argv
from time import time
import math as m
from pprint import pprint
import re
import threading
from concurrent.futures import ThreadPoolExecutor


# To render or not to render that is the question
RENDER = True

# Render global variables
RENDER_SIZE_FACTOR = 1
RENDER_SAMPLE_FACTOR = 1


#  Detect  hamiltonian path exists in this graph or not
def findSolution(graph, visited, result, node, counter, n, start):
    if (counter == n and node == start):
        result[counter] = node
        print(result)
        return True

    if (visited[node]):
        return False

    #  indicates visiting node
    visited[node] = True
    #  Store path result
    result[counter] = node
    i = 0
    while (i < n):
        if (graph[node][i] == 1):
            if findSolution(graph, visited, result, i, counter + 1, n, start):
                return True

        i += 1

    #  reset the status of visiting node
    visited[node] = False


def setDefault(visited, n):
    i = 0
    while (i < n):
        visited[i] = False
        i += 1


#  Handles the request of find and display hamiltonian path
def hamiltonianCycle_single(graph, num_cycles):
    n = len(graph)
    #  Indicator of visited node
    visited = [False] * (n)
    #  Used to store path information
    result = [0] * (n + 1)
    i = 0
    cycles_found = 0
    while (i < n) and cycles_found < num_cycles:
        setDefault(visited, n)
        if findSolution(graph, visited, result, i, 0, n, i):
            cycles_found += 1
        i += 1


def hamiltonianCycle_multi(graph, num_cycles, start_vert):
    n = len(graph)
    #  Indicator of visited node
    visited = [False] * (n)
    #  Used to store path information
    result = [0] * (n + 1)
    setDefault(visited, n)
    findSolution(graph, visited, result, start_vert, 0, n, start_vert)


def make_adjacency(edge_list):
    size = len(set([n for e in edge_list for n in e]))
    # make an empty adjacency list
    adjacency = [[0] * size for _ in range(size)]
    # populate the list for each edge
    for sink, source in edge_list:
        adjacency[sink][source] = 1

    return adjacency


# Blender will update the view with each primitive addition, we do not want that, instead
# lets block it from updating the view until the end
# https://blender.stackexchange.com/questions/7358/python-performance-with-blender-
# operators
def run_ops_without_view_layer_update(func):
    '''
    Workaround function as mentioned above to only update the meshes after everything
    has been generated, severely shortens the amount of time building generation takes
    '''

    from bpy.ops import _BPyOpsSubModOp
    view_layer_update = _BPyOpsSubModOp._view_layer_update

    def dummy_view_layer_update(context):
        pass
    try:
        _BPyOpsSubModOp._view_layer_update = dummy_view_layer_update
        func()
    finally:
        _BPyOpsSubModOp._view_layer_update = view_layer_update


def main():
    '''
    Main function
        clears scene, sets conditions, generates building plan then starts generation
        does not do the rendering
    '''

    edge_list = [[44, 46], [46, 0], [0, 2], [2, 44], [45, 3], [3, 1], [1, 47], [47, 45], [42, 44], [2, 4], [4, 42], [43, 5], [5, 3], [45, 43], [2, 8], [8, 6], [6, 4], [5, 7], [7, 9], [9, 3], [0, 10], [10, 8], [9, 11], [11, 1], [10, 12], [12, 14], [14, 8], [9, 15], [15, 13], [13, 11], [14, 16], [16, 6], [7, 17], [17, 15], [14, 20], [20, 18], [18, 16], [17, 19], [19, 21], [21, 15], [12, 22], [22, 20], [21, 23], [23, 13], [22, 24], [24, 26], [26, 20], [21, 27], [27, 25], [25, 23], [26, 28], [28, 18], [19, 29], [29, 27], [26, 32], [32, 30], [30, 28], [29, 31], [31, 33], [33, 27], [24, 34], [34, 32], [33, 35], [35, 25], [34, 36], [36, 38], [38, 32], [33, 39], [39, 37], [37, 35], [38, 40], [40, 30], [31, 41], [41, 39], [38, 44], [42, 40], [41, 43], [45, 39], [36, 46], [47, 37], [48, 46], [36, 50], [50, 48], [49, 51], [51, 37], [47, 49], [34, 52], [52, 50], [51, 53], [53, 35], [24, 54], [54, 52], [53, 55], [55, 25], [22, 56], [56, 54], [55, 57], [57, 23], [12, 58], [58, 56], [57, 59], [59, 13], [10, 62], [62, 58], [59, 63], [63, 11], [0, 64], [64, 62], [63, 65], [65, 1], [48, 64], [65, 49], [48, 60], [60, 64], [61, 49], [65, 61], [60, 62], [63, 61], [60, 58], [59, 61], [60, 56], [57, 61], [60, 54], [55, 61], [60, 52], [53, 61], [60, 50], [51, 61], [90, 88], [88, 173], [173, 175], [175, 90], [175, 174], [174, 89], [89, 90], [88, 86], [86, 171], [171, 173], [174, 172], [172, 87], [87, 89], [86, 84], [84, 169], [169, 171], [172, 170], [170, 85], [85, 87], [84, 82], [82, 167], [167, 169], [170, 168], [168, 83], [83, 85], [82, 80], [80, 165], [165, 167], [168, 166], [166, 81], [81, 83], [163, 78], [78, 91], [91, 145], [145, 163], [164, 146], [146, 92], [92, 79], [79, 164], [91, 93], [93, 147], [147, 145], [146, 148], [148, 94], [94, 92], [93, 95], [95, 149], [149, 147], [148, 150], [150, 96], [96, 94], [95, 97], [97, 151], [151, 149], [150, 152], [152, 98], [98, 96], [97, 99], [99, 153], [153, 151], [152, 154], [154, 100], [100, 98], [99, 101], [101, 155], [155, 153], [154, 156], [156, 102], [102, 100], [101, 103], [103, 157], [157, 155], [156, 158], [158, 104], [104, 102], [103, 105], [105, 159], [159, 157], [158, 160], [160, 106], [106, 104], [105, 107], [107, 161], [161, 159], [160, 162], [162, 108], [108, 106], [107, 66], [66, 67], [67, 161], [162, 67], [66, 108], [161, 109], [109, 127], [127, 159], [160, 128], [128, 110], [110, 162], [127, 178], [178, 157], [158, 179], [179, 128], [178, 125], [125, 155], [156, 126], [126, 179], [125, 123], [123, 153], [154, 124], [124, 126], [123, 121], [121, 151], [152, 122], [122, 124], [121, 119], [119, 149], [150, 120], [120, 122], [119, 117], [117, 147], [148, 118], [118, 120], [117, 115], [115, 145], [146, 116], [116, 118], [115, 113], [113, 163], [164, 114], [114, 116], [113, 180], [180, 176], [176, 163], [164, 176], [176, 181], [181, 114], [111, 109], [67, 111], [112, 67], [110, 112], [182, 111], [67, 177], [177, 182], [183, 177], [112, 183], [177, 176], [180, 182], [183, 181], [173, 134], [134, 136], [136, 175], [136, 135], [135, 174], [171, 132], [132, 134], [135, 133], [133, 172], [169, 130], [130, 132], [133, 131], [131, 170], [165, 186], [186, 184], [184, 167], [168, 185], [185, 187], [187, 166], [184, 130], [131, 185], [186, 143], [143, 189], [189, 188], [188, 186], [187, 188], [189, 144], [144, 187], [68, 184], [188, 68], [185, 68], [68, 129], [129, 130], [131, 129], [143, 141], [141, 192], [192, 190], [190, 143], [144, 191], [191, 193], [193, 142], [142, 144], [141, 139], [139, 194], [194, 192], [193, 195], [195, 140], [140, 142], [139, 138], [138, 196], [196, 194], [195, 197], [197, 138], [138, 140], [138, 137], [137, 70], [70, 196], [197, 70], [69, 189], [190, 69], [69, 191], [207, 69], [190, 205], [205, 207], [207, 206], [206, 191], [70, 198], [198, 199], [199, 196], [197, 200], [200, 198], [199, 201], [201, 194], [195, 202], [202, 200], [201, 203], [203, 192], [193, 204], [204, 202], [203, 205], [206, 204], [198, 203], [204, 198], [198, 207], [176, 138], [139, 163], [164, 140], [141, 210], [210, 163], [164, 211], [211, 142], [143, 212], [212, 210], [211, 213], [213, 144], [165, 212], [213, 166], [80, 208], [208, 212], [213, 209], [209, 81], [208, 214], [214, 210], [211, 215], [215, 209], [214, 78], [79, 215], [221, 130], [129, 71], [71, 221], [222, 71], [131, 222], [219, 132], [221, 219], [220, 222], [133, 220], [217, 134], [219, 217], [218, 220], [135, 218], [216, 136], [217, 216], [216, 218], [230, 216], [217, 228], [228, 230], [230, 229], [229, 218], [219, 226], [226, 228], [229, 227], [227, 220], [221, 224], [224, 226], [227, 225], [225, 222], [71, 223], [223, 224], [225, 223], [223, 230], [228, 224], [225, 229], [231, 182], [180, 233], [233, 231], [232, 234], [234, 181], [183, 232], [253, 111], [231, 253], [254, 232], [112, 254], [255, 109], [253, 255], [256, 254], [110, 256], [113, 251], [251, 233], [234, 252], [252, 114], [115, 249], [249, 251], [252, 250], [250, 116], [117, 247], [247, 249], [250, 248], [248, 118], [119, 245], [245, 247], [248, 246], [246, 120], [121, 243], [243, 245], [246, 244], [244, 122], [123, 241], [241, 243], [244, 242], [242, 124], [125, 239], [239, 241], [242, 240], [240, 126], [178, 235], [235, 239], [240, 236], [236, 179], [127, 237], [237, 235], [236, 238], [238, 128], [255, 237], [238, 256], [275, 237], [255, 257], [257, 275], [276, 258], [258, 256], [238, 276], [277, 235], [275, 277], [278, 276], [236, 278], [273, 239], [277, 273], [274, 278], [240, 274], [271, 241], [273, 271], [272, 274], [242, 272], [269, 243], [271, 269], [270, 272], [244, 270], [267, 245], [269, 267], [268, 270], [246, 268], [265, 247], [267, 265], [266, 268], [248, 266], [263, 249], [265, 263], [264, 266], [250, 264], [261, 251], [263, 261], [262, 264], [252, 262], [279, 233], [261, 279], [280, 262], [234, 280], [253, 259], [259, 257], [258, 260], [260, 254], [231, 281], [281, 259], [260, 282], [282, 232], [279, 281], [282, 280], [72, 66], [107, 283], [283, 72], [72, 284], [284, 108], [105, 285], [285, 283], [284, 286], [286, 106], [103, 287], [287, 285], [286, 288], [288, 104], [101, 289], [289, 287], [288, 290], [290, 102], [99, 291], [291, 289], [290, 292], [292, 100], [97, 293], [293, 291], [292, 294], [294, 98], [95, 295], [295, 293], [294, 296], [296, 96], [93, 297], [297, 295], [296, 298], [298, 94], [91, 299], [299, 297], [298, 300], [300, 92], [337, 307], [307, 308], [308, 327], [327, 337], [338, 328], [328, 308], [307, 338], [335, 306], [306, 307], [337, 335], [336, 338], [306, 336], [339, 305], [305, 306], [335, 339], [340, 336], [305, 340], [339, 88], [90, 305], [89, 340], [333, 86], [339, 333], [334, 340], [87, 334], [329, 84], [333, 329], [330, 334], [85, 330], [331, 82], [329, 331], [332, 330], [83, 332], [329, 335], [337, 331], [332, 338], [336, 330], [327, 325], [325, 331], [332, 326], [326, 328], [325, 80], [81, 326], [208, 341], [341, 343], [343, 214], [215, 344], [344, 342], [342, 209], [325, 341], [342, 326], [345, 78], [343, 345], [346, 344], [79, 346], [345, 299], [300, 346], [303, 76], [76, 323], [323, 351], [351, 303], [303, 352], [352, 324], [324, 76], [77, 303], [351, 349], [349, 77], [77, 350], [350, 352], [304, 77], [349, 347], [347, 304], [304, 348], [348, 350], [308, 304], [347, 327], [328, 348], [347, 341], [342, 348], [309, 295], [297, 317], [317, 309], [310, 318], [318, 298], [296, 310], [76, 75], [75, 315], [315, 323], [324, 316], [316, 75], [302, 301], [301, 357], [357, 355], [355, 302], [302, 356], [356, 358], [358, 301], [74, 302], [355, 353], [353, 74], [74, 354], [354, 356], [75, 74], [353, 315], [316, 354], [363, 291], [293, 361], [361, 363], [364, 362], [362, 294], [292, 364], [365, 363], [361, 367], [367, 365], [366, 368], [368, 362], [364, 366], [371, 365], [367, 369], [369, 371], [372, 370], [370, 368], [366, 372], [373, 371], [369, 375], [375, 373], [374, 376], [376, 370], [372, 374], [375, 313], [313, 377], [377, 373], [374, 378], [378, 314], [314, 376], [377, 315], [353, 373], [374, 354], [316, 378], [355, 371], [372, 356], [357, 365], [366, 358], [357, 359], [359, 363], [364, 360], [360, 358], [359, 289], [290, 360], [301, 73], [73, 359], [360, 73], [289, 283], [284, 290], [73, 283], [284, 73], [73, 72], [309, 361], [362, 310], [309, 311], [311, 367], [368, 312], [312, 310], [311, 381], [381, 369], [370, 382], [382, 312], [381, 313], [314, 382], [383, 347], [349, 385], [385, 383], [384, 386], [386, 350], [348, 384], [319, 317], [317, 383], [385, 319], [320, 386], [384, 318], [318, 320], [299, 383], [384, 300], [299, 343], [341, 383], [384, 342], [344, 300], [313, 321], [321, 379], [379, 377], [378, 380], [380, 322], [322, 314], [379, 323], [324, 380], [321, 319], [385, 379], [380, 386], [320, 322], [351, 379], [380, 352], [401, 399], [399, 387], [387, 413], [413, 401], [402, 414], [414, 388], [388, 400], [400, 402], [397, 399], [401, 403], [403, 397], [398, 404], [404, 402], [400, 398], [395, 397], [403, 405], [405, 395], [396, 406], [406, 404], [398, 396], [393, 395], [405, 407], [407, 393], [394, 408], [408, 406], [396, 394], [391, 393], [407, 409], [409, 391], [392, 410], [410, 408], [394, 392], [389, 391], [409, 411], [411, 389], [390, 412], [412, 410], [392, 390], [409, 419], [419, 417], [417, 411], [412, 418], [418, 420], [420, 410], [407, 421], [421, 419], [420, 422], [422, 408], [405, 423], [423, 421], [422, 424], [424, 406], [403, 425], [425, 423], [424, 426], [426, 404], [401, 427], [427, 425], [426, 428], [428, 402], [413, 415], [415, 427], [428, 416], [416, 414], [441, 317], [319, 443], [443, 441], [442, 444], [444, 320], [318, 442], [319, 389], [411, 443], [444, 412], [390, 320], [441, 311], [312, 442], [387, 381], [381, 429], [429, 413], [414, 430], [430, 382], [382, 388], [417, 439], [439, 443], [444, 440], [440, 418], [439, 437], [437, 445], [445, 443], [444, 446], [446, 438], [438, 440], [435, 433], [433, 445], [437, 435], [436, 438], [446, 434], [434, 436], [433, 431], [431, 447], [447, 445], [446, 448], [448, 432], [432, 434],
    [449, 429], [429, 447], [431, 449], [450, 432], [448, 430], [430, 450], [449, 415], [416, 450], [311, 447], [448, 312], [441, 445], [446, 442], [475, 415], [449, 451], [451, 475], [476, 452], [452, 450], [416, 476], [431, 461], [461, 451], [452, 462], [462, 432], [433, 459], [459, 461], [462, 460], [460, 434], [435, 457], [457, 459], [460, 458], [458, 436], [437, 455], [455, 457], [458, 456], [456, 438], [439, 453], [453, 455], [456, 454], [454, 440], [417, 473], [473, 453], [454, 474], [474, 418], [463, 427], [475, 463], [464, 476], [428, 464], [465, 425], [463, 465], [466, 464], [426, 466], [467, 423], [465, 467], [468, 466], [424, 468], [469, 421], [467, 469], [470, 468], [422, 470], [471, 419], [469, 471], [472, 470], [420, 472], [471, 473], [474, 472], [477, 457], [455, 479], [479, 477], [478, 480], [480, 456], [458, 478], [483, 477], [479, 481], [481, 483], [484, 482], [482, 480], [478, 484], [485, 483], [481, 487], [487, 485], [486, 488], [488, 482], [484, 486], [491, 485], [487, 489], [489, 491], [492, 490], [490, 488], [486, 492], [491, 463], [475, 485], [486, 476], [464, 492], [451, 483], [484, 452], [461, 477], [478, 462], [473, 479], [480, 474], [471, 481], [482, 472], [469, 487], [488, 470], [467, 489], [490, 468], [465, 491], [492, 466], [501, 391], [389, 503], [503, 501], [502, 504], [504, 390], [392, 502], [499, 393], [501, 499], [500, 502], [394, 500], [497, 395], [499, 497], [498, 500], [396, 498], [495, 397], [497, 495], [496, 498], [398, 496], [493, 399], [495, 493], [494, 496], [400, 494], [505, 387], [493, 505], [506, 494], [388, 506], [493, 501], [503, 505], [506, 504], [502, 494], [495, 499], [500, 496], [505, 313], [314, 506], [503, 321], [322, 504]]

    adj_list = make_adjacency(edge_list)
    num_cycles = 1
    vert_count = len(adj_list)

    # checkpoint = time()
    # hamiltonianCycle_single(adj_list, num_cycles)

    # check_1 = time() - checkpoint
    # print("Single Thread")
    # print("--- %s seconds ---\n" % check_1)

    checkpoint = time()
    with ThreadPoolExecutor() as executor:
        for thread in range(vert_count):
            executor.submit(
                hamiltonianCycle_multi,
                adj_list,
                num_cycles,
                thread)

    check_2 = time() - checkpoint
    print("Multi Thread")
    print("--- %s seconds ---\n" % check_2)

    print("Multi was %s seconds faster" % (check_1 - check_2))

    print("Done")


if __name__ == "__main__":
    main()
